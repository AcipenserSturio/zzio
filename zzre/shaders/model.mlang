option IsInstanced;
option IsSkinned;
option HasTexShift;
option HasEnvMap;
option DepthWrite; // enabled by default in the C# material
option DepthTest; // also enabled by default
option Blend = IsOpaque, IsAlphaBlend, IsAdditiveBlend, IsAdditiveAlphaBlend;

attributes
{
    float3 inPos;
    byte4_norm inColor;
}
attributes if (HasEnvMap) float3 inNormal;
attributes if (!HasEnvMap) float2 inUV;
attributes if (IsSkinned)
{
    float4 inWeights;
    byte4 inIndices;
}

instances mat4 world;
instances if (HasTexShift) mat3x2 inTexShift;
instances byte4_norm inTint;

varying
{
    float2 varUV;
    float4 varColor;
}

uniform texture2D mainTexture;
uniform sampler mainSampler;
uniform mat4 projection;
uniform view
{
    mat4 viewMatrix;
    float4 camPos;
    float4 camDir;
}
uniform factors
{
    float inVertexColorFactor;
    float inTintFactor;
    float inAlphaReference;
}
uniform if (IsSkinned) buffer mat4[] pose;

pipeline
{
    blend One + Zero One + One;
    output r8_g8_b8_a8_unorm outColor;
    output d24_unorm_s8_uint;
    depthwrite off;
    depthtest off;
}

pipeline if (DepthWrite)
{
    depthwrite on;
}

pipeline if (DepthTest)
{
    depthtest on;
}

pipeline if (Blend == IsAlphaBlend)
{
    blend SrcAlpha + InvSrcAlpha;
}

pipeline if (Blend == IsAdditiveBlend)
{
    blend One + One;
}

pipeline if (Blend == IsAdditiveAlphaBlend)
{
    blend SrcAlpha + One;
}

vec4 weighColor(vec4 color, float factor)
{
	return color * factor + vec4(1,1,1,1) * (1 - factor);
}

vertex
{
    vec4 pos = vec4(inPos, 1);

    if (IsSkinned)
    {
        pos =
            (pose[inIndices.x] * pos) * inWeights.x +
            (pose[inIndices.y] * pos) * inWeights.y +
            (pose[inIndices.z] * pos) * inWeights.z +
            (pose[inIndices.w] * pos) * inWeights.w;
        pos.w = 1;
    }

	pos = world * pos;
	pos = viewMatrix * pos;
	pos = projection * pos;
	gl_Position = pos;
    
    vec2 uv;
    if (HasEnvMap)
    {
        float3 incident = normalize(vec3(world[3] - camPos - camDir + vec4(inPos, 0)));
        float cosAngle = dot(incident, inNormal);
        float3 reflected = inNormal * -2 * cosAngle - incident;
        uv = normalize(reflected).xz;
        uv = (uv + 1) / 2;
    }
    else
        uv = inUV;
    if (HasTexShift)
        uv = inTexShift * vec3(uv, 1);
	varUV = uv;

	varColor = inColor;
}

fragment
{
    vec4 color = texture(sampler2D(mainTexture, mainSampler), varUV)
		* weighColor(varColor, inVertexColorFactor)
		* weighColor(inTint, inTintFactor);
	if (color.a < inAlphaReference)
		discard;
	outColor = color;
}
