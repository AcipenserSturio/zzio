option DepthTest;
option Billboard = IsNoBillboard, IsViewBillboard, IsSparkBillboard, IsLensFlare;
option Blend = IsAdditiveBlend, IsAdditiveAlphaBlend, IsAlphaBlend;
option HasFog;

variants exclude if (Billboard == IsLensFlare && HasFog);

attributes
{
    float3 inVertexPos;
    float2 inUV;
    byte4_norm inColor;
}
attributes if (Billboard != IsNoBillboard) float3 inCenterPos;
attributes if (Billboard == IsSparkBillboard) float3 inDirection;

uniform texture2D mainTexture;
uniform sampler mainSampler;
uniform mat4 projection;
uniform view
{
    mat4 viewMatrix;
    float4 camPos;
    float4 camDir;
}
uniform factors
{
    float inAlphaReference;
}
uniform fogParams if (HasFog)
{
    float4 fogColor;
    float fogOffset;
    float fogScale;
    float fogExp;
}

varying
{
    float2 varUV;
    float4 varColor;
}
varying if (HasFog) float varFogFactor;

pipeline
{
    output r8_g8_b8_a8_unorm outColor;
    output D32_Float_S8_UInt;
    depthwrite off;
    depthtest off;
}

pipeline if (DepthTest)
{
    depthtest on;
}

pipeline if (Blend == IsAlphaBlend)
{
    blend SrcAlpha + InvSrcAlpha;
}

pipeline if (Blend == IsAdditiveBlend)
{
    blend One + One;
}

pipeline if (Blend == IsAdditiveAlphaBlend)
{
    blend SrcAlpha + One;
}

vertex
{
    vec4 pos;
    if (Billboard == IsNoBillboard)
        pos = viewMatrix * vec4(inVertexPos, 1);
    else if (Billboard == IsViewBillboard)
        pos = viewMatrix * vec4(inCenterPos, 1) + vec4(inVertexPos, 0);
    else if (Billboard == IsSparkBillboard)
    {
        vec3 right = vec3(viewMatrix * vec4(inDirection, 0)).xyz;
        vec3 up = normalize(cross(inCenterPos - camPos.xyz, right));
        pos += vec4(inVertexPos.x * right + inVertexPos.y * up, 0);
    }
    else if (Billboard == IsLensFlare)
    {
        pos = vec4(inCenterPos + inVertexPos, 1);
        gl_Position = pos;
    }

    if (Billboard != IsLensFlare)
        gl_Position = projection * pos;

    varUV = inUV;
    varColor = inColor;

    if (HasFog)
    {
        float fogFactor = (fogOffset - pos.z) * fogScale;
        if (fogExp > 0)
            fogFactor = 1 / pow(2, pow(fogFactor, fogExp));
        varFogFactor = clamp(1 - fogFactor, 0, 1);
    }
}

fragment
{
    vec4 color = texture(sampler2D(mainTexture, mainSampler), varUV) * varColor;
    if (color.a < inAlphaReference)
        discard;
    if (HasFog)
	    outColor = vec4(mix(color.xyz, fogColor.xyz, varFogFactor), color.a);
    else
        outColor = color;
}
